{
	"info": {
		"_postman_id": "c50c0d60-fa17-4e5e-925a-b70e4e6d0560",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 3.Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\" , function () {\r",
							"    pm.expect(resp.name).to.eql(\"Denis\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test (\"Age\" , function () {\r",
							"    pm.expect(+(resp.age)).to.eql(25);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test (\"Salary\" , function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"})\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Name_1\" , function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test (\"Age_1\", function (){\r",
							"    pm.expect (resp.age).to.eql(req.age);\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test (\"Salary_1\", function (){\r",
							"    pm.expect (resp.salary).to.eql(+req.salary);\r",
							"})\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test (\"Salary_2\", function (){\r",
							"    pm.expect (resp.family.u_salary_1_5_year).to.eql(+req.salary*4);\r",
							"})\r",
							"\r",
							"var resp_family = (resp.family);\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log (\"FAMILY\", resp_family);\r",
							"console.log (\"SALARY 1,5 year\", resp.family.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"    var resp = pm.response.json();\r",
							"    //Спарсить request.\r",
							"    var req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function ()\r",
							"{    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test (\"Age\",  function () {pm.expect(resp.age).to.eql(req.age);});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test (\"Salary\",  function () {pm.expect(resp.salary).to.eql(+req.salary);});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Name DOG\", function () {    pm.expect(resp.family.pets.dog.name).to.exist;})\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Age Dog\", function () {    pm.expect(resp.family.pets.dog.age).to.exist;})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog\", function () { pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\"); });\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test (\"Dog Age\", function () { pm.expect(resp.family.pets.dog.age).to.eql(4);});\r",
							"\r",
							"console.log (\"Name\", req.name);\r",
							"console.log(\"FAMILY\", resp.family)\r",
							"console.log (\"DOG\", resp.family.pets.dog.name)\r",
							"console.log (\"DOG Age\", resp.family.pets.dog.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"// Спарсить request.\r",
							"var resp_data = pm.response.json();\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name ===\", function (){\r",
							"    pm.expect(resp_data.name).to.eql(req.name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test (\"Age\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(+req.age);\r",
							"})\r",
							"\r",
							"console.log(req.name)\r",
							"console.log(\"AGE\",req.age)\r",
							"\r",
							"console.log(\"Salary_resp\",resp_data.salary[0]);\r",
							"console.log(\"Salary_resp_1\",resp_data.salary[1]);\r",
							"console.log(\"Salary_resp_2\",resp_data.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test (\"Salary_0\", function () {\r",
							"    pm.expect (resp_data.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_1\", function () {\r",
							"    pm.expect (+resp_data.salary[1]).to.eql(+req.salary*2)\r",
							"})\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_2\", function () {\r",
							"    pm.expect(+resp_data.salary[2]).to.eql(+req.salary*3)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"name\",req.name);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"if (3>1 ) {\r",
							"    console.log (\"salar\",resp_data.salary);}\r",
							"\r",
							"console.log (\"SALARY_REQ\", req.salary)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('start_qa_salary', function() {\r",
							"  pm.expect(resp).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('qa_salary_after_6_months', function() {\r",
							"  pm.expect(resp).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('qa_salary_after_12_months', function() {\r",
							"  pm.expect(resp).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('qa_salary_after_1.5_year', function() {\r",
							"  pm.expect(resp).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('qa_salary_after_3.5_years', function() {\r",
							"  pm.expect(resp).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test('person', function() {\r",
							"  pm.expect(resp).to.have.property('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test (\"start_Salary\", function (){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_after_6_months\", function (){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_after_12_months\", function (){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_after_1.5_year\", function (){\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test (\"Salary_after_3.5_years\", function (){\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);\r",
							"})\r",
							"\r",
							"\r",
							"//console.log (\"start\",resp.qa_salary_after_3.5_years)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}